{
	"info": {
		"_postman_id": "ebc30732-1415-4216-b61a-7e3895e91450",
		"name": "RealWorld Typescript",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1841370"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const username = pm.variables.replaceIn('{{$randomUserName}}').toLowerCase();",
									"pm.collectionVariables.set(\"username\", username);",
									"pm.collectionVariables.set(\"email\", `${username}@mail.com`);",
									"pm.collectionVariables.set(\"password\", 'password');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;    ",
									"    pm.collectionVariables.set('token', jsonData.user.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\",\n        \"username\": \"{{username}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Bad request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedValue = { \"errors\": { \"/user\": [ \"must have required property 'username'\" ] } };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;",
									"    pm.collectionVariables.set('token', jsonData.user.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{email}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Bad email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{$randomEmail}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{email}}\",\n        \"password\": \"{{$randomPassword}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedValue = { \"errors\": { \"/user\": [ \"must have required property 'email'\", \"must NOT have additional properties\" ] } };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"xemail\": \"{{email}}\",\n        \"password\": \"{{$randomPassword}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user - Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{$randomUUID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current user - Missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bio = pm.variables.replaceIn('{{$randomCatchPhrase}}');",
									"const image = `https://loremflickr.com/240/240?rand=${Math.random()}`",
									"pm.collectionVariables.set(\"bio\", bio);",
									"pm.collectionVariables.set(\"image\", image);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.bio).to.eql(pm.collectionVariables.get(\"bio\"));",
									"    pm.expect(jsonData.user.image).to.eql(pm.collectionVariables.get(\"image\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"bio\": \"{{bio}}\",\n    \"image\": \"{{image}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user - Only email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.email).to.eql(pm.collectionVariables.get(\"email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n      \"email\": \"{{email}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user - Bad request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedValue = { \"errors\": { \"\": [ \"must have required property 'user'\", \"must NOT have additional properties\" ] } };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"xuser\": {\n    \"bio\": \"{{bio}}\",\n    \"image\": \"{{image}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user - No mutations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedValue = { \"errors\": { \"/user\": [ \"must NOT have fewer than 1 properties\" ] } };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Register celeb user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const username = pm.variables.replaceIn('celeb-{{$randomUserName}}').toLowerCase();",
									"pm.collectionVariables.set(\"celeb-username\", username);",
									"pm.collectionVariables.set(\"celeb-email\", `${username}@mail.com`);",
									"pm.collectionVariables.set(\"celeb-password\", 'password');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.authenticatedUser)).to.be.true;    ",
									"    pm.collectionVariables.set('celeb-token', jsonData.user.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n        \"email\": \"{{celeb-email}}\",\n        \"password\": \"{{celeb-password}}\",\n        \"username\": \"{{celeb-username}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: false,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile - Unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/profiles/{{$randomUserName}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{$randomUserName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: true,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow - Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: true,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow - Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{$randomUUID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow - Unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{$randomUserName}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{$randomUserName}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile - After follow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: true,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: false,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow - Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: false,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow - Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{$randomUUID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow - Unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{$randomUserName}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{$randomUserName}}",
								"follow"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Article",
			"item": [
				{
					"name": "Create article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"articleTitle\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
									"pm.collectionVariables.set(\"articleDescription\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
									"pm.collectionVariables.set(\"articleBody\", pm.variables.replaceIn('{{$randomLoremParagraph}}'));",
									"",
									"for (let i = 0; i < 3; ++i) {",
									"  pm.collectionVariables.set(`articleTag${i}`, pm.variables.replaceIn('{{$randomLoremWord}}'));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(tv4.validate(jsonData, schemas.article)).to.be.true;",
									"  const articleSlug = jsonData.article.slug;",
									"  pm.collectionVariables.set('articleSlug', articleSlug);",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.article.title).to.eql(pm.collectionVariables.get(\"articleTitle\"));",
									"  pm.expect(jsonData.article.description).to.eql(pm.collectionVariables.get(\"articleDescription\"));",
									"  pm.expect(jsonData.article.body).to.eql(pm.collectionVariables.get(\"articleBody\"));",
									"  pm.expect(jsonData.article.author.username).to.eql(pm.collectionVariables.get(\"celeb-username\"));",
									"",
									"  const expTagList = [",
									"    pm.collectionVariables.get(\"articleTag0\"),",
									"    pm.collectionVariables.get(\"articleTag1\"),",
									"    pm.collectionVariables.get(\"articleTag2\"),",
									"  ].sort();",
									"  pm.expect(jsonData.article.tagList.sort()).to.eql(expTagList);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"title\": \"{{articleTitle}}\",\n    \"description\": \"{{articleDescription}}\",\n    \"body\": \"{{articleBody}}\",\n    \"tagList\": [\"{{articleTag0}}\", \"{{articleTag1}}\", \"{{articleTag2}}\"] \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create article - Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedValue = { \"errors\": { \"/article\": [ \"must have required property 'title'\" ] } };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"body\": \"foo\",\n    \"description\": \"foo\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(tv4.validate(jsonData, schemas.article)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.article.title).to.eql(pm.collectionVariables.get(\"articleTitle\"));",
									"  pm.expect(jsonData.article.description).to.eql(pm.collectionVariables.get(\"articleDescription\"));",
									"  pm.expect(jsonData.article.body).to.eql(pm.collectionVariables.get(\"articleBody\"));",
									"  pm.expect(jsonData.article.author.username).to.eql(pm.collectionVariables.get(\"celeb-username\"));",
									"",
									"  const expTagList = [",
									"    pm.collectionVariables.get(\"articleTag0\"),",
									"    pm.collectionVariables.get(\"articleTag1\"),",
									"    pm.collectionVariables.get(\"articleTag2\"),",
									"  ].sort();",
									"  pm.expect(jsonData.article.tagList.sort()).to.eql(expTagList);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get article - Unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/articles/{{$randomUUID}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: true,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get article - As follower",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(tv4.validate(jsonData, schemas.article)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.article.title).to.eql(pm.collectionVariables.get(\"articleTitle\"));",
									"  pm.expect(jsonData.article.description).to.eql(pm.collectionVariables.get(\"articleDescription\"));",
									"  pm.expect(jsonData.article.body).to.eql(pm.collectionVariables.get(\"articleBody\"));",
									"  pm.expect(jsonData.article.author.username).to.eql(pm.collectionVariables.get(\"celeb-username\"));",
									"  pm.expect(jsonData.article.author.following).to.be.true;",
									"",
									"  const expTagList = [",
									"    pm.collectionVariables.get(\"articleTag0\"),",
									"    pm.collectionVariables.get(\"articleTag1\"),",
									"    pm.collectionVariables.get(\"articleTag2\"),",
									"  ].sort();",
									"  pm.expect(jsonData.article.tagList.sort()).to.eql(expTagList);  ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schemas.profile)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    expectedValue = {",
									"        profile: {",
									"            username: pm.collectionVariables.get('celeb-username'),",
									"            bio: null,",
									"            image: null,",
									"            following: false,",
									"        }",
									"    };",
									"    pm.expect(jsonData).to.deep.equal(expectedValue);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{APIURL}}/profiles/{{celeb-username}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"{{celeb-username}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get article - As nonfollower",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(tv4.validate(jsonData, schemas.article)).to.be.true;",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.article.title).to.eql(pm.collectionVariables.get(\"articleTitle\"));",
									"  pm.expect(jsonData.article.description).to.eql(pm.collectionVariables.get(\"articleDescription\"));",
									"  pm.expect(jsonData.article.body).to.eql(pm.collectionVariables.get(\"articleBody\"));",
									"  pm.expect(jsonData.article.author.username).to.eql(pm.collectionVariables.get(\"celeb-username\"));",
									"  pm.expect(jsonData.article.author.following).to.be.false;",
									"",
									"  const expTagList = [",
									"    pm.collectionVariables.get(\"articleTag0\"),",
									"    pm.collectionVariables.get(\"articleTag1\"),",
									"    pm.collectionVariables.get(\"articleTag2\"),",
									"  ].sort();",
									"  pm.expect(jsonData.article.tagList.sort()).to.eql(expTagList);  ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"articleTitle\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
									"pm.collectionVariables.set(\"articleDescription\", pm.variables.replaceIn('{{$randomLoremSentence}}'));",
									"pm.collectionVariables.set(\"articleBody\", pm.variables.replaceIn('{{$randomLoremParagraph}}'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema is valid', function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(tv4.validate(jsonData, schemas.article)).to.be.true;",
									"  const articleSlug = jsonData.article.slug;",
									"",
									"  // Verify slug has changed",
									"  pm.expect(articleSlug).to.not.equal(pm.collectionVariables.get(\"articleSlug\"));",
									"  pm.collectionVariables.set('articleSlug', articleSlug);",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.article.title).to.eql(pm.collectionVariables.get(\"articleTitle\"));",
									"  pm.expect(jsonData.article.description).to.eql(pm.collectionVariables.get(\"articleDescription\"));",
									"  pm.expect(jsonData.article.body).to.eql(pm.collectionVariables.get(\"articleBody\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"title\": \"{{articleTitle}}\",\n    \"description\": \"{{articleDescription}}\",\n    \"body\": \"{{articleBody}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update article - Not author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"title\": \"{{articleTitle}}\",\n    \"description\": \"{{articleDescription}}\",\n    \"body\": \"{{articleBody}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update article - Unknown",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"title\": \"{{articleTitle}}\",\n    \"description\": \"{{articleDescription}}\",\n    \"body\": \"{{articleBody}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{$randomUUID}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update article - Bad request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"  pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"xtitle\": \"{{articleTitle}}\",\n    \"description\": \"{{articleDescription}}\",\n    \"body\": \"{{articleBody}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update article - No mutations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"  pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete article - Unknown",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{$randomUUID}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete article - Not author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{celeb-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get article - After delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{APIURL}}/articles/{{articleSlug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"articles",
								"{{articleSlug}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Etc",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASEURL}}",
							"host": [
								"{{BASEURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"  pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASEURL}}/?throwError=1",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "throwError",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Data is correct\", function () {",
									"  var jsonData = pm.response.json();",
									"  pm.expect(jsonData.message).to.exist;",
									"  pm.expect(jsonData.message).to.include(\"Body Parser failed to parse request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"username\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const articleDetailsSchema = {",
					"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"slug\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"title\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"description\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"body\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"tagList\": {",
					"      \"type\": \"array\",",
					"      \"items\": [",
					"        {",
					"          \"type\": \"string\"",
					"        },",
					"        {",
					"          \"type\": \"string\"",
					"        },",
					"        {",
					"          \"type\": \"string\"",
					"        }",
					"      ]",
					"    },",
					"    \"createdAt\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"updatedAt\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"favorited\": {",
					"      \"type\": \"boolean\"",
					"    },",
					"    \"favoritesCount\": {",
					"      \"type\": \"integer\"",
					"    },",
					"    \"author\": {",
					"      \"type\": \"object\",",
					"      \"properties\": {",
					"        \"username\": {",
					"          \"type\": \"string\"",
					"        },",
					"        \"bio\": {",
					"          \"type\": [\"string\", \"null\"]",
					"        },",
					"        \"image\": {",
					"          \"type\": [\"string\", \"null\"]",
					"        },",
					"        \"following\": {",
					"          \"type\": \"boolean\"",
					"        }",
					"      },",
					"      \"required\": [",
					"        \"username\",",
					"        \"bio\",",
					"        \"image\",",
					"        \"following\"",
					"      ]",
					"    }",
					"  },",
					"  \"required\": [",
					"    \"slug\",",
					"    \"title\",",
					"    \"description\",",
					"    \"body\",",
					"    \"tagList\",",
					"    \"createdAt\",",
					"    \"updatedAt\",",
					"    \"favorited\",",
					"    \"favoritesCount\",",
					"    \"author\"",
					"  ]",
					"}",
					"",
					"schemas = {",
					"  authenticatedUser: {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"      \"user\": {",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"          \"email\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"token\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"username\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"bio\": {",
					"            \"type\": [\"string\", \"null\"]",
					"          },",
					"          \"image\": {",
					"            \"type\": [\"string\", \"null\"]",
					"          }",
					"        },",
					"        \"additionalProperties\": false,",
					"        \"required\": [",
					"          \"email\",",
					"          \"token\",",
					"          \"username\",",
					"        ]",
					"      }",
					"    },",
					"    \"additionalProperties\": false,",
					"    \"required\": [",
					"      \"user\"",
					"    ]",
					"  },",
					"  profile: {",
					"    \"type\": \"object\",",
					"    \"properties\": {",
					"      \"profile\": {",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"          \"username\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"bio\": {",
					"            \"type\": [\"string\", \"null\"]",
					"          },",
					"          \"image\": {",
					"            \"type\": [\"string\", \"null\"]",
					"          },",
					"          \"following\": {",
					"            \"type\": \"boolean\"",
					"          }",
					"        },",
					"        \"required\": [",
					"          \"username\",",
					"          \"bio\",",
					"          \"image\",",
					"          \"following\"",
					"        ]",
					"      }",
					"    },",
					"    \"required\": [",
					"      \"profile\"",
					"    ]",
					"  },",
					"  article: {",
					"    type: \"object\",",
					"    properties: articleDetailsSchema,",
					"    required: [\"article\"]",
					"  },",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASEURL",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "APIURL",
			"value": "{{BASEURL}}/api",
			"type": "default"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "bio",
			"value": ""
		},
		{
			"key": "image",
			"value": ""
		},
		{
			"key": "celeb-username",
			"value": ""
		},
		{
			"key": "celeb-email",
			"value": ""
		},
		{
			"key": "celeb-password",
			"value": ""
		},
		{
			"key": "articleBody",
			"value": ""
		},
		{
			"key": "articleTitle",
			"value": ""
		},
		{
			"key": "articleDescription",
			"value": ""
		},
		{
			"key": "articleTags",
			"value": ""
		},
		{
			"key": "articleTag0",
			"value": ""
		},
		{
			"key": "articleTag1",
			"value": ""
		},
		{
			"key": "articleTag2",
			"value": ""
		},
		{
			"key": "celeb-token",
			"value": ""
		},
		{
			"key": "articleSlug",
			"value": ""
		}
	]
}